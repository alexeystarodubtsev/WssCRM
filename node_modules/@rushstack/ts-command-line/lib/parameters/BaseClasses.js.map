{"version":3,"file":"BaseClasses.js","sourceRoot":"","sources":["../../src/parameters/BaseClasses.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport {\r\n  IBaseCommandLineDefinition,\r\n  IBaseCommandLineDefinitionWithArgument\r\n} from './CommandLineDefinition';\r\n\r\n/**\r\n * Identifies the kind of a CommandLineParameter.\r\n * @public\r\n */\r\nexport enum CommandLineParameterKind {\r\n  /** Indicates a CommandLineChoiceParameter */\r\n  Choice,\r\n  /** Indicates a CommandLineFlagParameter */\r\n  Flag,\r\n  /** Indicates a CommandLineIntegerParameter */\r\n  Integer,\r\n  /** Indicates a CommandLineStringParameter */\r\n  String,\r\n  /** Indicates a CommandLineStringListParameter */\r\n  StringList\r\n}\r\n\r\n/**\r\n * The base class for the various command-line parameter types.\r\n * @public\r\n */\r\nexport abstract class CommandLineParameter {\r\n  // Example: \"--do-something\"\r\n  private static _longNameRegExp: RegExp = /^-(-[a-z0-9]+)+$/;\r\n\r\n  // Example: \"-d\"\r\n  private static _shortNameRegExp: RegExp = /^-[a-zA-Z]$/;\r\n\r\n  // \"Environment variable names used by the utilities in the Shell and Utilities volume of\r\n  // IEEE Std 1003.1-2001 consist solely of uppercase letters, digits, and the '_' (underscore)\r\n  // from the characters defined in Portable Character Set and do not begin with a digit.\"\r\n  // Example: \"THE_SETTING\"\r\n  private static _environmentVariableRegExp: RegExp = /^[A-Z_][A-Z0-9_]*$/;\r\n\r\n  /**\r\n   * A unique internal key used to retrieve the value from the parser's dictionary.\r\n   * @internal\r\n   */\r\n  public _parserKey: string;\r\n\r\n  /** {@inheritDoc IBaseCommandLineDefinition.parameterLongName} */\r\n  public readonly longName: string;\r\n\r\n  /** {@inheritDoc IBaseCommandLineDefinition.parameterShortName} */\r\n  public readonly shortName: string | undefined;\r\n\r\n  /** {@inheritDoc IBaseCommandLineDefinition.description} */\r\n  public readonly description: string;\r\n\r\n  /** {@inheritDoc IBaseCommandLineDefinition.required} */\r\n  public readonly required: boolean;\r\n\r\n  /** {@inheritDoc IBaseCommandLineDefinition.environmentVariable} */\r\n  public readonly environmentVariable: string | undefined;\r\n\r\n  /** @internal */\r\n  public constructor(definition: IBaseCommandLineDefinition) {\r\n    this.longName = definition.parameterLongName;\r\n    this.shortName = definition.parameterShortName;\r\n    this.description = definition.description;\r\n    this.required = !!definition.required;\r\n    this.environmentVariable = definition.environmentVariable;\r\n\r\n    if (!CommandLineParameter._longNameRegExp.test(this.longName)) {\r\n      throw new Error(`Invalid name: \"${this.longName}\". The parameter long name must be`\r\n        + ` lower-case and use dash delimiters (e.g. \"--do-a-thing\")`);\r\n    }\r\n\r\n    if (this.shortName) {\r\n      if (!CommandLineParameter._shortNameRegExp.test(this.shortName)) {\r\n        throw new Error(`Invalid name: \"${this.shortName}\". The parameter short name must be`\r\n          + ` a dash followed by a single upper-case or lower-case letter (e.g. \"-a\")`);\r\n      }\r\n    }\r\n\r\n    if (this.environmentVariable) {\r\n      if (this.required) {\r\n        // TODO: This constraint is imposed only because argparse enforces \"required\" parameters, but\r\n        // it does not know about ts-command-line environment variable mappings.  We should fix this.\r\n        throw new Error(`An \"environmentVariable\" cannot be specified for \"${this.longName}\"`\r\n          + ` because it is a required parameter`);\r\n      }\r\n\r\n      if (!CommandLineParameter._environmentVariableRegExp.test(this.environmentVariable)) {\r\n        throw new Error(`Invalid environment variable name: \"${this.environmentVariable}\". The name must`\r\n          + ` consist only of upper-case letters, numbers, and underscores. It may not start with a number.`);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Called internally by CommandLineParameterProvider._processParsedData()\r\n   * @internal\r\n   */\r\n  public abstract _setValue(data: any): void; // eslint-disable-line @typescript-eslint/no-explicit-any\r\n\r\n  /**\r\n   * Returns additional text used by the help formatter.\r\n   * @internal\r\n   */\r\n  public _getSupplementaryNotes(supplementaryNotes: string[]): void { // virtual\r\n    if (this.environmentVariable !== undefined) {\r\n      supplementaryNotes.push('This parameter may alternatively specified via the ' + this.environmentVariable\r\n      + ' environment variable.');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Indicates the type of parameter.\r\n   */\r\n  public abstract get kind(): CommandLineParameterKind;\r\n\r\n  /**\r\n   * Append the parsed values to the provided string array.\r\n   * @remarks\r\n   * Sometimes a command line parameter is not used directly, but instead gets passed through to another\r\n   * tool that will use it.  For example if our parameter comes in as \"--max-count 3\", then we might want to\r\n   * call `child_process.spawn()` and append [\"--max-count\", \"3\"] to the args array for that tool.\r\n   * appendToArgList() appends zero or more strings to the provided array, based on the input command-line\r\n   * that we parsed.\r\n   *\r\n   * If the parameter was omitted from our command-line and has no default value, then\r\n   * nothing will be appended.  If the short name was used, the long name will be appended instead.\r\n   * @param argList - the parsed strings will be appended to this string array\r\n   */\r\n  public abstract appendToArgList(argList: string[]): void;\r\n\r\n  /**\r\n   * Internal usage only.  Used to report unexpected output from the argparse library.\r\n   */\r\n  protected reportInvalidData(data: any): never { // eslint-disable-line @typescript-eslint/no-explicit-any\r\n    throw new Error(`Unexpected data object for parameter \"${this.longName}\": `\r\n      + JSON.stringify(data));\r\n  }\r\n\r\n  protected validateDefaultValue(hasDefaultValue: boolean): void {\r\n    if (this.required && hasDefaultValue) {\r\n      // If a parameter is \"required\", then the user understands that they always need to\r\n      // specify a value for this parameter (either via the command line or via an environment variable).\r\n      // It would be confusing to allow a default value that sometimes allows the \"required\" parameter\r\n      // to be omitted.  If you sometimes don't have a suitable default value, then the better approach\r\n      // is to throw a custom error explaining why the parameter is required in that case.\r\n      throw new Error(`A default value cannot be specified for \"${this.longName}\"`\r\n        + ` because it is a \"required\" parameter`);\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * The common base class for parameters types that receive an argument.\r\n *\r\n * @remarks\r\n * An argument is an accompanying command-line token, such as \"123\" in the\r\n * example \"--max-count 123\".\r\n * @public\r\n */\r\nexport abstract class CommandLineParameterWithArgument extends CommandLineParameter {\r\n  // Matches the first character that *isn't* part of a valid upper-case argument name such as \"URL_2\"\r\n  private static _invalidArgumentNameRegExp: RegExp = /[^A-Z_0-9]/;\r\n\r\n  /** {@inheritDoc IBaseCommandLineDefinitionWithArgument.argumentName} */\r\n  public readonly argumentName: string;\r\n\r\n  /** @internal */\r\n  public constructor(definition: IBaseCommandLineDefinitionWithArgument) {\r\n    super(definition);\r\n\r\n    if (definition.argumentName === '') {\r\n      throw new Error('The argument name cannot be an empty string. (For the default name, specify undefined.)');\r\n    }\r\n    if (definition.argumentName.toUpperCase() !== definition.argumentName) {\r\n      throw new Error(`Invalid name: \"${definition.argumentName}\". The argument name must be all upper case.`);\r\n    }\r\n    const match: RegExpMatchArray | null = definition.argumentName.match(\r\n      CommandLineParameterWithArgument._invalidArgumentNameRegExp);\r\n    if (match) {\r\n      throw new Error(`The argument name \"${definition.argumentName}\" contains an invalid character \"${match[0]}\".`\r\n        + ` Only upper-case letters, numbers, and underscores are allowed.`);\r\n    }\r\n    this.argumentName = definition.argumentName;\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n"]}